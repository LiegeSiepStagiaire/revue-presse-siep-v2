
import streamlit as st
import feedparser
from datetime import datetime, timedelta
import pandas as pd

# ---------- CONFIGURATION UI ----------
st.set_page_config(page_title="Revue de presse SIEP", page_icon="üì∞", layout="wide")

# ---------- RUBRIQUES ----------
rubriques = {
    "Travail et Insertion Socio-Professionnelle": [
        "emploi", "recherche d‚Äôemploi", "l√©gislation du travail", "contrat",
        "job √©tudiant", "insertion socio-professionnelle", "CISP",
        "ann√©e citoyenne", "volontariat", "r√©daction de CV"
    ],
    "Enseignement de plein exercice": [
        "√©tudes", "enseignement secondaire", "enseignement sup√©rieur", "enseignement qualifiant",
        "d√©cret", "structure scolaire", "organisation des √©tudes", "√©tablissement scolaire",
        "droit scolaire", "exclusion scolaire", "recours scolaire", "acc√®s aux √©tudes",
        "co√ªt des √©tudes", "bourse d‚Äô√©tude", "pr√™t d‚Äô√©tude", "CPMS", "√©cole de devoirs",
        "rem√©diation", "m√©thode de travail", "aide √† la r√©ussite", "tutorat", "DASPA",
        "certification", "choix d‚Äô√©tudes", "ann√©e pr√©paratoire", "journ√©e portes ouvertes",
        "passerelle", "valorisation des acquis (VAE)"
    ],
    "Formation": [
        "formation en alternance", "CEFA", "IFAPME", "EFP", "jury", "enseignement √† distance",
        "horaire r√©duit", "alphab√©tisation", "promotion sociale", "formation demandeur d‚Äôemploi",
        "FOREM", "ACTIRIS", "centre de comp√©tence", "validation des comp√©tences"
    ],
    "Protection sociale / aide aux personnes": [
        "ch√¥mage", "mutuelle", "aide sociale", "revenu d‚Äôint√©gration sociale (RIS)",
        "allocations familiales", "financement des √©tudes", "aide √† la jeunesse"
    ],
    "Vie familiale et affective": [
        "sexualit√©", "planning familial", "√©galit√© des genres", "animation GDBD", "charte √©galit√©"
    ],
    "Qualit√© de vie": [
        "sant√©", "consommation", "harc√®lement", "sensibilisation", "logement interg√©n√©rationnel",
        "kot √©tudiant", "contrat de bail", "transport"
    ],
    "Loisirs / vacances": [
        "sport", "stage vacances", "formation animateur", "centre d‚Äôh√©bergement", "centre de rencontre"
    ],
    "International": [
        "projet international", "s√©jour linguistique", "stage √† l‚Äô√©tranger", "apprendre les langues",
        "bourse internationale", "test de langue", "niveau CECRL", "mobilit√© europ√©enne"
    ],
    "√ätre acteur dans la soci√©t√© / Institutions et justice": [
        "citoyennet√©", "droits", "devoirs", "engagement", "implication politique", "d√©mocratie",
        "droit √† l‚Äôimage", "r√©seaux sociaux", "nationalit√©", "institutions belges",
        "institutions europ√©ennes", "droits humains", "partis politiques", "participation des jeunes",
        "mouvements philosophiques", "police", "justice", "groupe de pression"
    ],
    "Les M√©tiers": [
        "orientation m√©tier", "projet de vie", "connaissance de soi", "information m√©tier",
        "exploration", "rencontre professionnelle"
    ]
}

sources_fiables = [
    "rtbf.be", "lesoir.be", "lalibre.be", "lecho.be", "sudpresse.be",
    "forem.be", "actiris.be", "siep.be", "enseignement.be",
    "enseignement.catholique.be", "cfwb.be", "socialsecurity.be",
    "emploi.belgique.be"
]

# ---------- FONCTIONS ----------
def create_rss_url(keyword, start_date, end_date):
    base_url = "https://news.google.com/rss/search?"
    query = f"q={keyword.replace(' ', '+')}+after:{start_date}+before:{end_date}"
    params = "&hl=fr&gl=BE&ceid=BE:fr"
    return base_url + query + params

def get_articles(rss_url, additional_sources):
    feed = feedparser.parse(rss_url)
    articles = []
    for entry in feed.entries:
        link = entry.link
        if any(source in link for source in sources_fiables + additional_sources):
            articles.append({
                "title": entry.title,
                "link": link,
                "date": entry.published if 'published' in entry else "",
                "source": link.split('/')[2] if '//' in link else ""
            })
    return articles

def convert_to_csv(articles):
    df = pd.DataFrame(articles)
    return df.to_csv(index=False, sep=";").encode("utf-8")

# ---------- INTERFACE ----------
st.title("Revue de presse üìö - SIEP Li√®ge")

col1, col2 = st.columns([4, 1])
with col2:
    with open("Mode_emploi_SIEP_complet.pdf", "rb") as pdf_file:
        st.download_button(
            label="üìò Mode d'emploi + rubriques",
            data=pdf_file,
            file_name="Mode_emploi_SIEP_complet.pdf",
            mime="application/pdf",
            key="help_pdf"
        )

rubrique = st.selectbox("Rubrique", list(rubriques.keys()))

custom_sources_input = st.text_input(
    "Ajouter des sites web suppl√©mentaires √† consulter (ex: https://mon-site.be), s√©par√©s par des virgules :",
    ""
)
custom_sources = [url.strip().replace("https://", "").replace("http://", "").strip("/") for url in custom_sources_input.split(",") if url.strip()]

today = datetime.today()
def_start = today - timedelta(days=30)
start_date = st.date_input("Date de d√©but", def_start)
end_date = st.date_input("Date de fin", today)

custom_keyword = st.text_input("Rechercher un mot-cl√© personnalis√© (optionnel) :", "")

if st.button("üîç Rechercher"):
    start_str = start_date.strftime('%Y-%m-%d')
    end_str = end_date.strftime('%Y-%m-%d')

    st.subheader(f"R√©sultats pour la rubrique '{rubrique}' entre {start_str} et {end_str}")

    total_articles = []
    search_terms = [custom_keyword] if custom_keyword else rubriques[rubrique]

    for keyword in search_terms:
        url = create_rss_url(keyword, start_str, end_str)
        articles = get_articles(url, custom_sources)
        if articles:
            total_articles.extend(articles)

    if total_articles:
        st.download_button(
            label="üì• Exporter en CSV",
            data=convert_to_csv(total_articles),
            file_name="revue_presse_siep.csv",
            mime="text/csv",
            key="csv_export_button"
        )

        search_filter = st.text_input("üîé Filtrer les articles par mot-cl√© dans le titre :", "")
        for article in total_articles:
            if search_filter.lower() in article["title"].lower():
                st.markdown(
                    f"**{article['title']}**  \n"
                )
                st.markdown("---")
    else:
        st.info("Aucun article pertinent trouv√© pour cette rubrique et cette p√©riode.")
